name: Terraform Deployment

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: SERVICE_PRINCIPAL

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform -chdir=infra init

      # Optional: Import existing resources to avoid recreation
      - name: Terraform Import Existing Resources (Optional)
        run: |
          # Example: Check and import resource group
          if ! terraform -chdir=infra state list | grep "azurerm_resource_group.my_rg"; then
            echo "Importing existing resource group..."
            terraform -chdir=infra import azurerm_resource_group.my_rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/my-resource-group
          else
            echo "Resource group already in Terraform state. Skipping import."
          fi

      - name: Terraform Plan
        run: terraform -chdir=infra plan -var="AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" -var="AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" -var="AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Terraform Apply
        run: terraform -chdir=infra apply -auto-approve -var="AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" -var="AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" -var="AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}"
